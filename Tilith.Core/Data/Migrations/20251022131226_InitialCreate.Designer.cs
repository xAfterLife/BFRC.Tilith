// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using Tilith.Core.Data;

#nullable disable

namespace Tilith.Core.Data.Migrations
{
    [DbContext(typeof(TilithDbContext))]
    [Migration("20251022131226_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "10.0.0-rc.2.25502.107")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Tilith.Core.Entities.Banner", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Description")
                        .HasMaxLength(500)
                        .HasColumnType("character varying(500)");

                    b.Property<DateTime?>("EndDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(2048)
                        .HasColumnType("character varying(2048)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<DateTime>("StartDateUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.HasKey("Id");

                    b.HasIndex("EndDateUtc");

                    b.HasIndex("IsActive");

                    b.HasIndex("StartDateUtc");

                    b.ToTable("Banners", (string)null);
                });

            modelBuilder.Entity("Tilith.Core.Entities.BannerUnit", b =>
                {
                    b.Property<int>("BannerId")
                        .HasColumnType("integer");

                    b.Property<string>("UnitId")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<decimal?>("RateUpMultiplier")
                        .HasPrecision(4, 2)
                        .HasColumnType("numeric(4,2)");

                    b.HasKey("BannerId", "UnitId");

                    b.HasIndex("UnitId");

                    b.ToTable("BannerUnits", (string)null);
                });

            modelBuilder.Entity("Tilith.Core.Entities.User", b =>
                {
                    b.Property<decimal>("DiscordId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("numeric(20,0)");

                    b.Property<DateTime>("CreatedAtUtc")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("DisplayName")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.Property<long>("Experience")
                        .HasColumnType("bigint");

                    b.Property<int>("Gems")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("LastDailyClaimUtc")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime>("UpdatedAtUtc")
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("Username")
                        .HasMaxLength(32)
                        .HasColumnType("character varying(32)");

                    b.HasKey("DiscordId");

                    b.HasIndex("DiscordId")
                        .IsUnique();

                    b.HasIndex("Experience");

                    b.HasIndex("Gems");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Tilith.Core.Entities.BannerUnit", b =>
                {
                    b.HasOne("Tilith.Core.Entities.Banner", "Banner")
                        .WithMany("BannerUnits")
                        .HasForeignKey("BannerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Banner");
                });

            modelBuilder.Entity("Tilith.Core.Entities.Banner", b =>
                {
                    b.Navigation("BannerUnits");
                });
#pragma warning restore 612, 618
        }
    }
}
